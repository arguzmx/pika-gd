using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace PIKA.Modelo.Metadatos
{
    public class ReflectionMetadataExtractor<T> : IMetadataProvider<T>
    {
        public static string ObtieneTipoDato(Type t)
        {
            string type = "";
            switch (t)
            {
                case Type intType when intType == typeof(int):
                    return TipoDato.tInt32;

                case Type longype when longype == typeof(long):
                    return TipoDato.tInt64;

                case Type floatype when floatype == typeof(float):
                case Type decimalType when decimalType == typeof(decimal):
                    return TipoDato.tDouble;



                case Type datetimeType when datetimeType == typeof(DateTime):
                    return TipoDato.tDateTime;

                case Type boolType when boolType == typeof(bool):
                    return TipoDato.tBoolean;


                case Type stringType when stringType == typeof(string):
                    return TipoDato.tString;


                default:
                    break;
            }

            return type;

        }

        public async Task<MetadataInfo> Obtener()
        {


            MetadataInfo info = new MetadataInfo();
            List<Propiedad> properties = new List<Propiedad>();
            var t = typeof(T);


            PropertyInfo[] props = t.GetProperties();

            foreach (PropertyInfo prop in props)
            {

                Propiedad foundProp = null;

                object[] attrs = prop.GetCustomAttributes(true);
                foreach (object attr in attrs)
                {
                    if (attr is PropAttribute)
                    {
                        PropAttribute pa = (PropAttribute)attr;
                        foundProp = pa.GetProperty<T>();
                        foundProp.Type = ReflectionMetadataExtractor<T>.ObtieneTipoDato(prop.PropertyType);
                    }
                }

                if (foundProp != null)
                {

                    foreach (object attr in attrs)
                    {


                        if (attr is AttrAttribute)
                        {
                            AttrAttribute aa = (AttrAttribute)attr;
                            foundProp.Attributes.Add(aa.GetAttribute());
                        }

                        if (attr is TblAttribute)
                        {
                            TblAttribute ta = (TblAttribute)attr;
                            foundProp.TableAttributes = ta.GetTable();
                        }

                        if (attr is ValidStringAttribute)
                        {
                            ValidStringAttribute a = (ValidStringAttribute)attr;
                            foundProp.ValidString = a.GetAttribute();
                        }


                        if (attr is ValidNumericAttribute)
                        {
                            ValidNumericAttribute a = (ValidNumericAttribute)attr;
                            foundProp.ValidNumber = a.GetAttribute();
                        }
                    }

                    properties.Add(foundProp);
                }

            }

            await Task.Delay(1);

            info.Propiedades = properties;
            return info;


        }

    }

    public static class MetadataHelper
    {
        public static TableAttribute GetTable(this TblAttribute source)
        {
            return new TableAttribute()
            {
                IncludeIntable = source.IncludeIntable,
                OrderIndex = source.OrderIndex,
                TableClientId = source.TableClientId,
                Togglable = source.Togglable,
                Visible = source.Visible
            };
        }
        public static Propiedad GetProperty<T>(this PropAttribute source)
        {

            return new Propiedad()
            {
                I18nNameId = source.I18nNameId,
                Id = source.I18nNameId,
                Type = "",
                IsFKId = source.IsFKId,
                Autogenerated = source.Autogenerated,
                IsId = source.IsId,
                Orderable = source.Orderable,
                OrderIndex = source.OrderIndex,
                Required = source.Required,
                Searchable = source.Searchable,
                Value = null,
                Visible = source.Visible,
                HTMLControl = source.HTMLControl,
                IskeyValue = source.IskeyValue,
                DefaultValue = source.DefaultValue
            };
        }

        public static MetadataAttribute GetAttribute(this AttrAttribute source)
        {

            return new MetadataAttribute()
            {
                Id = source.Id,
                Value = source.Value
            };
        }

        public static ValidString GetAttribute(this ValidStringAttribute source)
        {

            return new ValidString()
            {
                defaulvalue = source.defaulvalue,
                maxlen = source.maxlen,
                minlen = source.minlen,
                regexp = source.regexp
            };
        }

        public static ValidNumber GetAttribute(this ValidNumericAttribute source)
        {

            return new ValidNumber()
            {
                defaulvalue = source.defaulvalue,
                max = source.max,
                min = source.min
            };
        }

    }
}
