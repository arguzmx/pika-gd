using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;

namespace PIKA.Modelo.Metadatos
{
    [AttributeUsage(AttributeTargets.All, AllowMultiple = false, Inherited = false)]
    public class PropAttribute : Attribute
    {

        
        public const string HTML_TOGGLE = "toggle";
        public const string HTML_CHECKBOX = "checkbox";
        public const string HTML_DATE = "datetime";
        public const string HTML_TIME = "datetime";
        public const string HTML_DATETIME = "datetime";
        public const string HTML_FILE = "file";
        public const string HTML_HIDDEN = "hidden";
        public const string HTML_NUMBER = "number";
        public const string HTML_RADIO = "radio";
        public const string HTML_TEXT = "textbox";
        public const string HTML_TEXTAREA = "textarea";
        public const string HTML_SELECT = "select";
        public const string HTML_PASSWORD = "password";
        public const string HTML_AVATAR = "avatar";
        public const string HTML_NONE = "none";


        [Flags]
        public enum CRUDActions
        {
            // No participa en ninguna acción crud
            none = 0,
            // Participa en acciones de lectura
            read = 1,
            // Participa en acciones de actualización
            write = 2,
            // Participa en acciones de eliminacion
            delete = 4,
            // Participa en acciones de adicion
            add = 8,
            // Participa en acciones de lectura, actualziacin y eliminacion
            rwd = 7,
            // Participa todas la acciones CRUD
            arwd = 15,
            // Crear y actualziar
            aw =10

        }

        private string _Id;
        private string _I18nNameId;
        private string _Type;
        private string _HTMLControl;
        private int _OrderIndex;
        private CRUDActions _actions;
        private bool _Searchable;
        private bool _Orderable;
        private bool _Visible;
        private bool _IsId;
        private bool _IsFKId;
        private bool _Required;
        private bool _Autogenerated;
        private bool _IskeyValue;
        private string _DefaultValue;
        private bool _IsHieId;
        private bool _IsHieText;
        private bool _IsHieParentId;
        private bool _IsHieFilter;
        private bool _OrdenarValoresListaPorNombre;
        /// <summary>
        /// Especifica la propeidad es requerida
        /// </summary>
        public virtual bool Required
        {
            get { return _Required; }
        }

        /// <summary>
        /// Identifica si es un campo auto generado por ejemplo un ID o una fecha
        /// </summary>
        public virtual bool Autogenerated
        {
            get { return _Autogenerated; }
        }

        /// <summary>
        /// Identifica si le propiedad es el idntificador único de los datos
        /// </summary>
        public virtual bool IsId
        {
            get { return _IsId; }
        }

        /// <summary>
        /// Especifica si la propiedad es utilizada como clave externa FK
        /// </summary>
        public virtual bool IsFKId
        {
            get { return _IsFKId; }
        }

        /// <summary>
        /// Especifica si la propiedad forma parte de una clave primaria
        /// </summary>
        public virtual bool IskeyValue
        {
            get { return _IskeyValue; }
        }

        /// <summary>
        /// Identifica si la propiedad debe ser considerada como clave primaria para 
        /// relaciones jerárquicas
        /// </summary>
        public virtual bool IsHieId
        {
            get { return _IsHieId; }
        }

        /// <summary>
        /// Especifica si la propedad debe ser utiliada como texto 
        /// en las relaciones jerárquicas
        /// </summary>
        public virtual bool IsHieText
        {
            get { return _IsHieText; }
        }

        /// <summary>
        /// Especifica si la propiedad contiene el id del objeto padre
        /// en una relación jerárquica
        /// </summary>
        public virtual bool IsHieParentId
        {
            get { return _IsHieParentId; }
        }

        /// <summary>
        /// Especifica si la propiedaad funciona como filtro en 
        /// relaciones jerárquicas
        /// </summary>
        public virtual bool IsHieFilter
        {
            get { return _IsHieFilter; }
        }

        public PropAttribute(string HTMLControl = HTML_TEXT, string Type = "",
            [CallerMemberName] string I18nNameId = null, string DefaultValue = "",
            int OrderIndex = 0, bool Searchable = true, bool Orderable = true, bool Visible = true,
            bool IsId = false, bool IsFKId = false, bool Required = false, bool Autogenerated = false,
            bool isHieId = false, bool isHieText = false, bool isHieParentId = false, bool isHieFilter = false,
            bool OrdenarValoresListaPorNombre = true,
            CRUDActions actions = CRUDActions.none)
        {

            this._HTMLControl = HTMLControl;
            this._IskeyValue = IskeyValue;
            this._IsId = IsId;
            this._IsFKId = IsFKId;
            this._Required = Required;
            this._Autogenerated = Autogenerated;
            this._Visible = Visible;
            this._Orderable = Orderable;
            this._Searchable = Searchable;
            this._Type = Type;
            this._I18nNameId = I18nNameId;
            this._OrderIndex = OrderIndex;
            this._actions = actions;
            this._IsHieFilter = isHieFilter;
            this._IsHieId = isHieId;
            this._IsHieParentId = isHieParentId;
            this._IsHieText = IsHieText;
            this._DefaultValue = DefaultValue;
            this._OrdenarValoresListaPorNombre = OrdenarValoresListaPorNombre;

        }

        /// <summary>
        /// Lista de operaciones en CRUD en las que la propiedad participa
        /// de acuerdo a la anumeración CRUDActions
        /// </summary>
        public virtual int CrudActions
        {
            get { return _actions.GetHashCode(); }
        }

        /// <summary>
        /// Tipo de control HTML pos default para la propiedad
        /// </summary>
        public virtual string HTMLControl
        {
            get { return _HTMLControl; }
        }

        /// <summary>
        /// Inndice para el despliegue de la propiedad
        /// </summary>
        public virtual int OrderIndex
        {
            get { return _OrderIndex; }
        }

        /// <summary>
        /// Identificadr único de la propiedad
        /// </summary>
        public virtual string Id
        {
            get { return _Id; }
        }

        /// <summary>
        /// String tipo de la propiedad de acuerdo a la entidad TIPODATO
        /// </summary>
        public virtual string Type
        {
            get { return _Type; }
        }

        /// <summary>
        /// Especifica si la propiedad puede ser utilziada para ordenar un arreglo de entidades
        /// </summary>
        public virtual bool Orderable
        {
            get { return _Orderable; }
        }

        /// <summary>
        /// Especifica si la propiedad puede ser utilziada para buscar en arreglo de entidades
        /// </summary>
        public virtual bool Searchable
        {
            get { return _Searchable; }
        }


        /// <summary>
        /// Especifica si la propiedad es visible
        /// </summary>
        public virtual bool Visible
        {
            get { return _Visible; }
        }


        /// <summary>
        ///  Determina si los valores en las listas se ordenana pro nombre o por indice
        /// </summary>
        public virtual bool OrdenarValoresListaPorNombre
        {
            get { return _OrdenarValoresListaPorNombre; }
        }

        /// <summary>
        /// Contiene el texto utilizado como nombre de la propiedad en el idiioma de la UI
        /// </summary>
        public virtual string I18nNameId
        {
            get { return _I18nNameId; }
        }

        /// <summary>
        /// Especifica el varlo defualt para la propiedad
        /// </summary>
        public virtual string DefaultValue
        {
            get { return _DefaultValue; }
        }

    }
}
