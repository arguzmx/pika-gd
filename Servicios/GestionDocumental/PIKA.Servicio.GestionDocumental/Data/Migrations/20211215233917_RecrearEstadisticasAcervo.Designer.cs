// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PIKA.Servicio.GestionDocumental.Data;

namespace PIKA.Servicio.GestionDocumental.Data.Migrations
{
    [DbContext(typeof(DBContextGestionDocumental))]
    [Migration("20211215233917_RecrearEstadisticasAcervo")]
    partial class RecrearEstadisticasAcervo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Activo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("Ampliado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ArchivoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ArchivoOrigenId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Asunto")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.Property<string>("CodigoElectronico")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<string>("CodigoOptico")
                        .HasColumnType("varchar(512) CHARACTER SET utf8mb4")
                        .HasMaxLength(512);

                    b.Property<bool>("Confidencial")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CuadroClasificacionId")
                        .IsRequired()
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("ElementoId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Eliminada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("EnPrestamo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EntradaClasificacionId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("EsElectronico")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaApertura")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaRetencionAC")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaRetencionAT")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IDunico")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("OrigenId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("Reservado")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TieneContenido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("TipoArchivoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("TipoOrigenId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("UnidadAdministrativaArchivoId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Ampliado");

                    b.HasIndex("ArchivoId");

                    b.HasIndex("ArchivoOrigenId");

                    b.HasIndex("CodigoElectronico");

                    b.HasIndex("CodigoOptico");

                    b.HasIndex("CuadroClasificacionId");

                    b.HasIndex("Eliminada");

                    b.HasIndex("EnPrestamo");

                    b.HasIndex("EntradaClasificacionId");

                    b.HasIndex("FechaApertura");

                    b.HasIndex("FechaCierre");

                    b.HasIndex("FechaRetencionAC");

                    b.HasIndex("FechaRetencionAT");

                    b.HasIndex("Nombre");

                    b.HasIndex("TieneContenido");

                    b.HasIndex("TipoArchivoId");

                    b.HasIndex("UnidadAdministrativaArchivoId");

                    b.ToTable("gd$activo");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ActivoDeclinado", b =>
                {
                    b.Property<string>("ActivoId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("TransferenciaId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.HasKey("ActivoId", "TransferenciaId");

                    b.HasIndex("TransferenciaId");

                    b.ToTable("gd$activodeclinado");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ActivoPrestamo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ActivoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("Devuelto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("FechaDevolucion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PrestamoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("ActivoId");

                    b.HasIndex("PrestamoId");

                    b.ToTable("gd$activoprestamo");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ActivoSeleccionado", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("TemaId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("Id", "UsuarioId", "TemaId");

                    b.HasIndex("TemaId");

                    b.ToTable("gd$activoseleccionado");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ActivoTransferencia", b =>
                {
                    b.Property<string>("ActivoId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("TransferenciaId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("ActivoId", "TransferenciaId");

                    b.HasIndex("TransferenciaId");

                    b.ToTable("gd$activotransferencia");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.AlmacenArchivo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ArchivoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ArchivoId");

                    b.ToTable("gd$almacen");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Ampliacion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ActivoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int?>("Anos")
                        .HasColumnType("int");

                    b.Property<int?>("Dias")
                        .HasColumnType("int");

                    b.Property<bool>("FechaFija")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("Fin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FundamentoLegal")
                        .IsRequired()
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("Inicio")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Meses")
                        .HasColumnType("int");

                    b.Property<string>("TipoAmpliacionId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("Vigente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("ActivoId");

                    b.HasIndex("TipoAmpliacionId");

                    b.ToTable("gd$ampliacion");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Archivo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("Eliminada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("OrigenId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("PuntoMontajeId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("TipoArchivoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("TipoOrigenId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("VolumenDefaultId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("TipoArchivoId");

                    b.ToTable("gd$archivo");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Asunto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ActivoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ActivoId")
                        .IsUnique();

                    b.ToTable("gd$asunto");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ComentarioPrestamo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PrestamoId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PrestamoId");

                    b.ToTable("gd$comentarioprestamo");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ComentarioTransferencia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Publico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("TransferenciaId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("TransferenciaId");

                    b.ToTable("gd$comentariotransferencia");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.CuadroClasificacion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("Eliminada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("EstadoCuadroClasificacionId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128)
                        .HasDefaultValue("on");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("OrigenId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("TipoOrigenId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("EstadoCuadroClasificacionId");

                    b.ToTable("gd$cuadroclasificacion");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ElementoClasificacion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("CuadroClasifiacionId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ElementoClasificacionId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<bool>("Eliminada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("EsRaiz")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("Posicion")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CuadroClasifiacionId");

                    b.HasIndex("ElementoClasificacionId");

                    b.ToTable("gd$elementoclasificacion");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.EntradaClasificacion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("CuadroClasifiacionId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ElementoClasificacionId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("Eliminada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("Posicion")
                        .HasColumnType("int");

                    b.Property<string>("TipoDisposicionDocumentalId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4");

                    b.Property<int>("VigenciaConcentracion")
                        .HasColumnType("int");

                    b.Property<int>("VigenciaTramite")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElementoClasificacionId");

                    b.HasIndex("TipoDisposicionDocumentalId");

                    b.ToTable("gd$entradaclasificacion");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.EstadisticaClasificacionAcervo", b =>
                {
                    b.Property<string>("ArchivoId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("CuadroClasificacionId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("UnidadAdministrativaArchivoId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("EntradaClasificacionId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("ConteoActivos")
                        .HasColumnType("int");

                    b.Property<int>("ConteoActivosEliminados")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaMaxCierre")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaMinApertura")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ArchivoId", "CuadroClasificacionId", "UnidadAdministrativaArchivoId", "EntradaClasificacionId");

                    b.HasIndex("CuadroClasificacionId");

                    b.HasIndex("EntradaClasificacionId");

                    b.HasIndex("UnidadAdministrativaArchivoId");

                    b.ToTable("gd$estadisticaclasificacionacervo");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.EstadoCuadroClasificacion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("gd$estadocuadroclasificacion");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.EstadoTransferencia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("gd$estadotransferencia");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.EventoTransferencia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Comentario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.Property<string>("EstadoTransferenciaId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TransferenciaId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("EstadoTransferenciaId");

                    b.HasIndex("TransferenciaId");

                    b.ToTable("gd$eventotransferencia");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.HistorialArchivoActivo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ActivoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ArchivoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("FechaEgreso")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ActivoId");

                    b.HasIndex("ArchivoId");

                    b.ToTable("gd$historialarchivoactivo");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.PermisosUnidadAdministrativaArchivo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("ActualizarAcervo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CrearAcervo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DestinatarioId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("ElminarAcervo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LeerAcervo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UnidadAdministrativaArchivoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("UnidadAdministrativaArchivoId");

                    b.ToTable("gd$permunidadadministrativa");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Prestamo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ArchivoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<int>("CantidadActivos")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("Devuelto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("Eliminada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("Entregado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaDevolucion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaProgramadaDevolucion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Folio")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("TieneDevolucionesParciales")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("UsuarioDestinoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("UsuarioOrigenId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("ArchivoId");

                    b.HasIndex("Devuelto");

                    b.HasIndex("FechaProgramadaDevolucion");

                    b.HasIndex("Folio");

                    b.HasIndex("UsuarioDestinoId");

                    b.HasIndex("UsuarioOrigenId");

                    b.ToTable("gd$prestamo");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Temas.TemaActivos", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("gd$temasactivos");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.TipoAmpliacion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("gd$tipoampliacion");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.TipoArchivo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("gd$tipoarchivo");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.TipoDisposicionDocumental", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("gd$tipodisposiciondocumental");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.TipoValoracionDocumental", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("gd$tipovaloraciondocumental");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Topologia.EspacioEstante", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("CodigoElectronico")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.Property<string>("CodigoOptico")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.Property<string>("EstanteId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("Posicion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstanteId");

                    b.ToTable("gd$espacioestante");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Topologia.Estante", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("AlmacenArchivoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("CodigoElectronico")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.Property<string>("CodigoOptico")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AlmacenArchivoId");

                    b.ToTable("gd$estantes");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Transferencia", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ArchivoDestinoId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ArchivoOrigenId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("EstadoTransferenciaId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("ArchivoDestinoId");

                    b.HasIndex("ArchivoOrigenId");

                    b.HasIndex("EstadoTransferenciaId");

                    b.ToTable("gd$transferencia");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.UnidadAdministrativaArchivo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ArchivoConcentracionId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ArchivoHistoricoId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ArchivoTramiteId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("AreaProcedenciaArchivo")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Cargo")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Domicilio")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("OrigenId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("Responsable")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("TipoOrigenId")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("UbicacionFisica")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("UnidadAdministrativa")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("ArchivoConcentracionId");

                    b.HasIndex("ArchivoHistoricoId");

                    b.HasIndex("ArchivoTramiteId");

                    b.ToTable("gd$unidadadministrativaarchivo");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ValoracionEntradaClasificacion", b =>
                {
                    b.Property<string>("EntradaClasificacionId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("TipoValoracionDocumentalId")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("EntradaClasificacionId", "TipoValoracionDocumentalId");

                    b.HasIndex("TipoValoracionDocumentalId");

                    b.ToTable("gd$valoracionentradaclasificacion");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Activo", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Archivo", "ArchivoActual")
                        .WithMany("Activos")
                        .HasForeignKey("ArchivoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.Archivo", "ArchivoOrigen")
                        .WithMany("ActivosOrigen")
                        .HasForeignKey("ArchivoOrigenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.CuadroClasificacion", "CuadroClasificacion")
                        .WithMany("Activos")
                        .HasForeignKey("CuadroClasificacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.EntradaClasificacion", "EntradaClasificacion")
                        .WithMany("Activos")
                        .HasForeignKey("EntradaClasificacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.TipoArchivo", "TipoArchivo")
                        .WithMany("Activos")
                        .HasForeignKey("TipoArchivoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.UnidadAdministrativaArchivo", "UnidadAdministrativa")
                        .WithMany("Activos")
                        .HasForeignKey("UnidadAdministrativaArchivoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ActivoDeclinado", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Activo", "Activo")
                        .WithMany("DeclinadosTransferenciaRelacionados")
                        .HasForeignKey("ActivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.Transferencia", "Transferencia")
                        .WithMany("ActivosDeclinados")
                        .HasForeignKey("TransferenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ActivoPrestamo", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Activo", "Activo")
                        .WithMany("PrestamosRelacionados")
                        .HasForeignKey("ActivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.Prestamo", "Prestamo")
                        .WithMany("ActivosRelacionados")
                        .HasForeignKey("PrestamoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ActivoSeleccionado", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Activo", "Activo")
                        .WithMany("ActivosSeleccionados")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.Temas.TemaActivos", "TemaActivos")
                        .WithMany("ActivosSeleccionados")
                        .HasForeignKey("TemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ActivoTransferencia", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Activo", "Activo")
                        .WithMany("TransferenciasRelacionados")
                        .HasForeignKey("ActivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.Transferencia", "Transferencia")
                        .WithMany("ActivosIncluidos")
                        .HasForeignKey("TransferenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.AlmacenArchivo", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Archivo", "Archivo")
                        .WithMany("Almacenes")
                        .HasForeignKey("ArchivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Ampliacion", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Activo", "activo")
                        .WithMany("Ampliaciones")
                        .HasForeignKey("ActivoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.TipoAmpliacion", "TipoAmpliacion")
                        .WithMany("Ampliaciones")
                        .HasForeignKey("TipoAmpliacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Archivo", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.TipoArchivo", "Tipo")
                        .WithMany("Archivos")
                        .HasForeignKey("TipoArchivoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Asunto", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Activo", "Activo")
                        .WithOne("Asuntos")
                        .HasForeignKey("PIKA.Modelo.GestorDocumental.Asunto", "ActivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ComentarioPrestamo", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Prestamo", "Prestamo")
                        .WithMany("Comentarios")
                        .HasForeignKey("PrestamoId");
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ComentarioTransferencia", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Transferencia", "Transferencia")
                        .WithMany("Comentarios")
                        .HasForeignKey("TransferenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.CuadroClasificacion", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.EstadoCuadroClasificacion", "Estado")
                        .WithMany("Cuadros")
                        .HasForeignKey("EstadoCuadroClasificacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ElementoClasificacion", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.CuadroClasificacion", "CuadroClasificacion")
                        .WithMany("Elementos")
                        .HasForeignKey("CuadroClasifiacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.ElementoClasificacion", "Padre")
                        .WithMany("Hijos")
                        .HasForeignKey("ElementoClasificacionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.EntradaClasificacion", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.ElementoClasificacion", null)
                        .WithMany("Entradas")
                        .HasForeignKey("ElementoClasificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.TipoDisposicionDocumental", "DisposicionEntrada")
                        .WithMany("EntradaClasificacion")
                        .HasForeignKey("TipoDisposicionDocumentalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.EstadisticaClasificacionAcervo", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Archivo", "Archivo")
                        .WithMany("EstadisticasClasificacionAcervo")
                        .HasForeignKey("ArchivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.CuadroClasificacion", "CuadroClasificacion")
                        .WithMany("EstadisticasClasificacionAcervo")
                        .HasForeignKey("CuadroClasificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.EntradaClasificacion", "EntradaClasificacion")
                        .WithMany("EstadisticasClasificacionAcervo")
                        .HasForeignKey("EntradaClasificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.UnidadAdministrativaArchivo", "UnidadAdministrativaArchivo")
                        .WithMany("EstadisticasClasificacionAcervo")
                        .HasForeignKey("UnidadAdministrativaArchivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.EventoTransferencia", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.EstadoTransferencia", "Estado")
                        .WithMany("Eventos")
                        .HasForeignKey("EstadoTransferenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.Transferencia", "Transferencia")
                        .WithMany("Eventos")
                        .HasForeignKey("TransferenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.HistorialArchivoActivo", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Activo", "Activo")
                        .WithMany("HistorialArchivosActivo")
                        .HasForeignKey("ActivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.Archivo", "Archivo")
                        .WithMany("HistorialArchivosActivo")
                        .HasForeignKey("ArchivoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.PermisosUnidadAdministrativaArchivo", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.UnidadAdministrativaArchivo", "UnidadAdministrativaArchivo")
                        .WithMany("Permisos")
                        .HasForeignKey("UnidadAdministrativaArchivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Prestamo", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Archivo", "Archivo")
                        .WithMany("Prestamos")
                        .HasForeignKey("ArchivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Topologia.EspacioEstante", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Topologia.Estante", "Estante")
                        .WithMany("Espacios")
                        .HasForeignKey("EstanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Topologia.Estante", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.AlmacenArchivo", "Almacen")
                        .WithMany("Estantes")
                        .HasForeignKey("AlmacenArchivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.Transferencia", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Archivo", "ArchivoDestino")
                        .WithMany("TransferenciasDestino")
                        .HasForeignKey("ArchivoDestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.Archivo", "ArchivoOrigen")
                        .WithMany("TransferenciasOrigen")
                        .HasForeignKey("ArchivoOrigenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.EstadoTransferencia", "Estado")
                        .WithMany("Transferencias")
                        .HasForeignKey("EstadoTransferenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.UnidadAdministrativaArchivo", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.Archivo", "ArchivoConcentracion")
                        .WithMany("UnidadesConcentracion")
                        .HasForeignKey("ArchivoConcentracionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PIKA.Modelo.GestorDocumental.Archivo", "ArchivoHistorico")
                        .WithMany("UnidadesHistorico")
                        .HasForeignKey("ArchivoHistoricoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PIKA.Modelo.GestorDocumental.Archivo", "ArchivoTramite")
                        .WithMany("UnidadesTramite")
                        .HasForeignKey("ArchivoTramiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PIKA.Modelo.GestorDocumental.ValoracionEntradaClasificacion", b =>
                {
                    b.HasOne("PIKA.Modelo.GestorDocumental.EntradaClasificacion", "EntradaClasificacion")
                        .WithMany("ValoracionesEntrada")
                        .HasForeignKey("EntradaClasificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PIKA.Modelo.GestorDocumental.TipoValoracionDocumental", "TipoValoracionDocumental")
                        .WithMany("ValoracionEntradas")
                        .HasForeignKey("TipoValoracionDocumentalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
